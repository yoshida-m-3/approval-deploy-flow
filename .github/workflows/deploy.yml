name: "Deploy - Combined Example"

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  # 並列実行セクション: これらのジョブは同時に開始される
  # ============================================
  
  # 並列ジョブ1: セットアップ
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.value }}
    steps:
      - uses: actions/checkout@v3.0.0
      - id: version
        run: |
          echo "value=v1.0.$GITHUB_RUN_NUMBER" >> $GITHUB_OUTPUT
          echo "Setup completed with version v1.0.$GITHUB_RUN_NUMBER"

  # 並列ジョブ2: リンティング（setupと同時実行）
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.0.0
      - run: |
          echo "Running code linting..."
          sleep 2
          echo "Linting completed"

  # 並列ジョブ3: セキュリティスキャン（setupと同時実行）
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.0.0
      - run: |
          echo "Running security scan..."
          sleep 3
          echo "Security scan completed"

  # 直列実行セクション: 以下のジョブは順番に実行される
  # ============================================
  
  # 直列ステップ1: ビルド（並列ジョブ完了後）
  build:
    runs-on: ubuntu-latest
    needs: [setup, lint, security]  # これらのジョブすべての完了を待つ
    steps:
      - uses: actions/checkout@v3.0.0
      - run: |
          echo "Building version ${{ needs.setup.outputs.version }}..."
          sleep 4
          echo "Build completed"

  # 直列ステップ2: テスト（ビルド完了後）
  test:
    runs-on: ubuntu-latest
    needs: build  # buildの完了を待つ
    steps:
      - uses: actions/checkout@v3.0.0
      - run: |
          echo "Running tests..."
          sleep 3
          echo "All tests passed"

  # 直列ステップ3: ステージングデプロイ（テスト完了後）
  deploy-staging:
    runs-on: ubuntu-latest
    needs: test  # testの完了を待つ
    environment:
      name: Staging
    steps:
      - uses: actions/checkout@v3.0.0
      - run: |
          echo "Deploying to staging..."
          sleep 3
          echo "Staging deployment completed"

  # 直列ステップ4: 本番デプロイ（ステージング完了後）
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging  # deploy-stagingの完了を待つ
    environment:
      name: Production
    steps:
      - uses: actions/checkout@v3.0.0
      - run: |
          echo "Deploying to production..."
          sleep 4
          echo "Production deployment completed"

  # サマリー: すべてのジョブの結果を集約
  summary:
    runs-on: ubuntu-latest
    if: always()
    needs: [setup, lint, security, build, test, deploy-staging, deploy-production]
    steps:
      - name: Generate Summary
        run: |
          echo "## Workflow Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 並列実行フェーズ (同時実行)" >> $GITHUB_STEP_SUMMARY
          echo "- Setup: ${{ needs.setup.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 直列実行フェーズ (順次実行)" >> $GITHUB_STEP_SUMMARY
          echo "1. Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "2. Test: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "3. Deploy Staging: ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY
          echo "4. Deploy Production: ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 実行パターンの説明" >> $GITHUB_STEP_SUMMARY
          echo "- **並列実行**: setup, lint, security は同時に開始" >> $GITHUB_STEP_SUMMARY
          echo "- **直列実行**: build → test → staging → production の順で実行" >> $GITHUB_STEP_SUMMARY
          echo "- **依存関係**: needsキーワードで前のジョブの完了を待機" >> $GITHUB_STEP_SUMMARY
